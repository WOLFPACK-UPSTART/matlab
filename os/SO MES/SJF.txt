#include <stdio.h>
struct Process {
    int process_id;
    int burst_time;
    int arrival_time;
    int waiting_time;
    int turnaround_time;
    int completed;
};
void sortByArrivalTime(struct Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival_time > processes[j + 1].arrival_time) {
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
}
int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct Process processes[n];
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        processes[i].completed = 0;
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
    }
    sortByArrivalTime(processes, n);
    int current_time = 0, completed_processes = 0;
    float total_waiting_time = 0, total_turnaround_time = 0;
    while (completed_processes < n) {
        int shortest_job_index = -1;
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].completed == 0) {
                if (shortest_job_index == -1 || processes[i].burst_time < processes[shortest_job_index].burst_time) {
                    shortest_job_index = i;
                }
            }
        }
        if (shortest_job_index == -1) {
            current_time++;
        } else {
            struct Process *p = &processes[shortest_job_index];
            p->waiting_time = current_time - p->arrival_time;
            current_time += p->burst_time;
            p->turnaround_time = p->waiting_time + p->burst_time;
            p->completed = 1;
            completed_processes++;

            total_waiting_time += p->waiting_time;
            total_turnaround_time += p->turnaround_time;
        }
    }
    printf("\nSJF(Shortest Job First) CPU Scheduling:\n");
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t\t\t%d\t\t\t\t%d\t\t\t\t%d\n", processes[i].process_id, processes[i].arrival_time, processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }
    printf("\nAverage Waiting Time: %.2f", total_waiting_time / n);
    printf("\nAverage Turnaround Time: %.2f", total_turnaround_time / n);
    return 0;
}